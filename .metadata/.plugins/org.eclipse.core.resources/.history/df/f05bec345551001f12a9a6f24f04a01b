package in.shiv.rest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import in.shiv.binding.Rate;
import in.shiv.service.LoanService;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

@RestController
public class LoanRestController {

	/*
	 * @Autowired private LoanService service;
	 * 
	 * @GetMapping("/loan") public ResponseEntity<Rate> loan(@RequestParam("type")
	 * String type) { Rate rate = service.gerRate(type); return new
	 * ResponseEntity<>(rate, HttpStatus.OK); }
	 */

	private static final Logger logger = LoggerFactory.getLogger(LoanService.class);
	private RestTemplate template;

	@GetMapping("/loan")
	@CircuitBreaker(name = "loanService", fallbackMethod = "fallback")
	 public ResponseEntity<Rate> loan(@RequestParam("type")String type) {
		System.out.println("******** Original method calling *********");

		String url = "http://localhost:8080/rate?type={type}";
		logger.info("Requesting rate from URL: {}", url);
		try {
			ResponseEntity<Rate> responseEntity = template.getForEntity(url, Rate.class, type);
			return new ResponseEntity<>(responseEntity.getBody(), HttpStatus.OK); 
		} catch (Exception e) {
			logger.error("Error occurred while fetching rate: ", e);
			throw e;
		}
	}

	public Rate fallback(Throwable t) {
		System.out.println("******** fallback method calling *********");
		Rate rate = new Rate();
		// return new ResponseEntity<>(rate, HttpStatus.OK);
		return rate;
	}
}
